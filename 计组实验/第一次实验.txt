`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/11/10 16:26:34
// Design Name: 
// Module Name: test
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module test(
        input clk,
        input rstn,
        input [15:0] sw_i,
        output [7:0] disp_an_o,
        output [7:0] disp_seg_o
    );
    wire clk_16div;
    clk_16divider clk16div(
        .clk(clk),
        .clk_16div(clk_16div)
    );
    
    wire [31:0] i_data=32'b1001_0110_0101_0100_0011_0010_0001_0000;
    
    an_selector an_st(
        .clk(clk_16div),
        .rstn(rstn),
        .i_data(i_data),
        .an(disp_an_o),
        .seg(disp_seg_o)
    );
endmodule



module clk_16divider(
    input clk,
    output wire clk_16div
);
    reg [8:0] counter;  

    always @(posedge clk) begin
        counter <= counter + 1;
    end

    assign clk_16div = counter[8];

endmodule

module an_selector(
    input clk,
    input rstn,
    input [31:0]i_data,
    output reg [7:0] an,
    output reg [7:0] seg
);
    reg [2: 0] selector;
    
    always @(posedge clk) begin
        selector <= selector + 1;
    end
    
    reg [31:0] i_data_store;
    always@(posedge clk,negedge rstn)
    begin
        if(!rstn)
            i_data_store<=0;
        else
            i_data_store<=i_data;
    end
    
    reg [3:0]seg_data_r;
    
    always@(*)begin
        case(selector)
           0:seg_data_r=i_data_store[3:0];
           1:seg_data_r=i_data_store[7:4];
           2:seg_data_r=i_data_store[11:8];
           3:seg_data_r=i_data_store[15:12];
           4:seg_data_r=i_data_store[19:16];
           5:seg_data_r=i_data_store[23:20];
           6:seg_data_r=i_data_store[27:24];
           7:seg_data_r=i_data_store[31:28];
        endcase end
    

    function [7:0] seven_seg_translator;
        input [3:0] digit; // [0, 9]
        case (digit) // 共阳极数码管
            0: seven_seg_translator = 8'hc0;
            1: seven_seg_translator = 8'hf9;
            2: seven_seg_translator = 8'ha4;
            3: seven_seg_translator = 8'hb0;
            4: seven_seg_translator = 8'h99;
            5: seven_seg_translator = 8'h92;
            6: seven_seg_translator = 8'h82;
            7: seven_seg_translator = 8'hf8;
            8: seven_seg_translator = 8'h80;
            9: seven_seg_translator = 8'h90;
            default: seven_seg_translator = 8'hff;
        endcase
    endfunction
    
always @(selector) begin
    case (selector)
        3'b000: begin
            an <= 8'b1111_1110;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b001: begin
            an <= 8'b1111_1101;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b010: begin
            an <= 8'b1111_1011;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b011: begin
            an <= 8'b1111_0111;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b100: begin
            an <= 8'b1110_1111;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b101: begin
            an <= 8'b1101_1111;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b110: begin
            an <= 8'b1011_1111;
            seg <= seven_seg_translator(seg_data_r);
        end
        3'b111: begin
            an <= 8'b0111_1111;
            seg <= seven_seg_translator(seg_data_r);
        end
    endcase
end

endmodule
